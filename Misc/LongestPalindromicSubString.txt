class Solution {
public:
    string longestPalindrome(string s) {
        int l = s.size();
        int start=0;
        int end=0;
        int count=0;
        int m=0;
        
        
        for(int i =0;i<s.size();i++)
        {
            
            int len1=expandFromMiddle(s,i,i);
            int len2=expandFromMiddle(s,i,i+1);
            int len = max(len1,len2);
        //    cout<<len<<endl;
            if(len>end-start)
            {
                start= i-(len-1)/2;
                end=i+(len)/2;
                cout<<start<<end<<endl;
            }  
           // cout<<start<<end;
        }
        return s.substr(start,end-start+1);
        
    }
    
    int expandFromMiddle(string s,int left,int right)
    {
        if(s.size()==0 || left>right)
        {
            return 0;
        }
        
        
        while(left>=0 && right<s.size() && s[left]==s[right])
        {
            left--;
            right++;
        }
        
        return right-left-1;
        
        
        
    }
};