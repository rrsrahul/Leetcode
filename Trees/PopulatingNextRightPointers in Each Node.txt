/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        Node* temp = root;
        
        queue<Node*> q;
        q.push(temp);
        
        while(!q.empty() && q.front()!=NULL)
        {
            int n = q.size();
            
            while(n--)
            {
                   temp = q.front();
               
                    q.pop();
                if(n!=0)
                {
                    temp->next= q.front();
            
                    q.push(temp->left);
                    q.push(temp->right);
                }
                else
                {
                    temp->next = NULL;
                    q.push(temp->left);
                    q.push(temp->right);
                }
            }
        }
        return root;
    }