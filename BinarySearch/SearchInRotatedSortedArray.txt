class Solution {
public:
    int findPivot(vector<int> n)
    {
        int l = 0,r=n.size()-1;
        int pivot=-1;
        int size = r;
        
        while(l<=r)
        {
            
            
            int mid = l + (r-l)/2;
          if(n[mid]>n[size])
          {
              l= mid+1;
          }
            else
            {
                pivot=mid;
                r=mid-1;
            }
            
        }
        return pivot;
    }
    
    int binarySearch(vector<int> nums,int l,int r,int target)
    {
        
        while(l<=r)
        {
           
             int mid = l + (r-l)/2;
             
            if(nums[mid]==target)
            {
                return mid;
            }
            else if(target<nums[mid])
            {
                r=mid-1;
            }
            else
            {
                l=mid+1;
            }
        }
      
        return -1;
    }
    int search(vector<int>& nums, int target) {
        
       
        
        if(nums.size()==0)
        {
            return -1;
        }
        
        int pivot = findPivot(nums);
        cout<<pivot;
        int l = 0;
        int r = nums.size()-1;
        if(target==nums[pivot])
        {
            return pivot;
        } 
          
        if(pivot==0)
        {
            return binarySearch(nums,0,r,target);
        }
        
       
        
        if(nums[0]<=target)
        {
            return binarySearch(nums,0,pivot-1,target);
        }
        return binarySearch(nums,pivot+1,r,target);
        
        
       
    }
};