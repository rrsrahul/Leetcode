class Solution {
public:
    void DFS(vector<vector<char>>& g,int n , int i )
    {
        pair<int,int> p1(n,i);
        //cout<<n<<"  "<< i <<endl;
        queue<pair<int,int>> st ; 
        st.push(p1);
        g[n][i]='0';
        while(!st.empty())
        {
            auto x = st.front();
            int m = x.first;
            int j = x. second ;
           // cout<<m<< "  "<< j << endl;
            if( m+1 < g.size() && g[m+1][j]=='1' )
            {
                p1.first = m+1;
                p1.second = j;
               st.push(p1);
                g[p1.first][p1.second]='0';
               // st.pop();
            }
            if(m-1>=0 && g[m-1][j]=='1')
            {
                  p1.first = m-1;
                p1.second = j;
                
               st.push(p1);
                g[p1.first][p1.second]='0';
             // st.pop();
            }
            if(j+1<g[0].size() && g[m][j+1]=='1' )
            {
                  p1.first = m;
                p1.second = j+1;
               st.push(p1);
                g[p1.first][p1.second]='0';
           // st.pop();
            }
            if(j-1>=0 && g[m][j-1]=='1')
            {
                 p1.first = m;
                p1.second = j-1;
               st.push(p1);
                g[p1.first][p1.second]='0';
               //  st.pop();
            }
            
            st.pop();
        }
        
        
    }

    
    int numIslands(vector<vector<char>>& grid) {
        if(grid.size() == 0 || grid[0].size()==0)
        {
            return 0 ; 
        }
        
        int m = grid.size();
        int n = grid[0].size();
        int count = 0 ; 
        
        for(int i = 0 ; i < m ; i ++ )
        {
            for(int j = 0 ; j < n ; j ++)
            {
                if(grid[i][j]=='1')
                {
                    DFS(grid,i,j);
                    count++;
                }
            
            }
        }
        
        for(int i = 0 ; i < m ; i ++ )
        {
            for(int j = 0 ; j < n ; j ++)
            {
                cout<<grid[i][j];
            }
            cout<<endl;
        }
        return count; 
    }
};